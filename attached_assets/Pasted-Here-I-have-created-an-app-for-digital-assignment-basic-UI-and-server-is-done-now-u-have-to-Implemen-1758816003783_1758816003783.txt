Here I have created an app for digital assignment basic UI and server is done now u have to Implement the features listed below. 
maintain a todo.md in the root folder [codebase] so I can track the process later.

only use the MERN stack architecture dont migrate the database !
---

## 1. Core Concept

* Teachers create digital assignments.
* Students solve assignments by spending tokens.
* Tokens are purchased with real money via RazorPay.
* Currency is determined by user location (India = INR, Outside = USD).
* Users have an account section to manage balance, purchases, assignments, and history.

---

## 2. Token & Payment Model

* Token: `E-paper Token`.
* Price: ₹2 per token (base currency).
* Conversion rate: 1 USD = ₹88.
* Token USD price: 2 / 88 ≈ $0.023 (~2.3 cents).
* Token usage: 1 token = 4 questions (0.25 token/question).

**Calculation Rule**:

```
tokensRequired = ceil(totalQuestions / 4)
cost = tokensRequired × tokenPrice
```

**Examples**:

* 40 questions → 10 tokens → ₹20 / $0.23.
* 100 questions → 25 tokens → ₹50 / $0.57.

---

## 3. Backend Architecture

**Entities**

* Users (students/teachers)
* Assignments
* Token Wallets
* Transactions (token deductions, purchases)
* Payments (RazorPay orders, receipts)
---

## 4. Payment Workflow

1. User attempts assignment or tries to top-up tokens.
2. Backend calculates required tokens and price.
3. RazorPay order is created with correct currency (INR or USD).
4. User pays via RazorPay checkout.
5. On success, backend verifies payment signature and credits tokens to user wallet.
6. Transaction + Payment records are logged.

---

## 5. Assignment Workflow

1. Student selects assignment.
2. System checks required tokens.
3. If wallet ≥ required, tokens are deducted and assignment unlocked.
4. If insufficient balance, student is prompted to purchase tokens.
5. Deduction is logged in transactions.

---

## 6. Account Section (User Portal)

A centralized dashboard where users manage their tokens, assignments, and payments.

**Sections**

* **Profile**: Basic info, country, currency preference (locked by geolocation at signup).
* **Wallet**: Current token balance, purchase tokens button, quick packs (10, 50, 100 tokens).
* **Usage History**: Assignments attempted, tokens spent, remaining balance.
* **Payments**: Previous purchases with invoice/receipt download.
* **Assignments**: List of unlocked/completed assignments.

---

## 7. UI/UX Design

**Student Flow**

* Dashboard with:

  * Current Token Balance (e.g., “You have 25 E-paper Tokens”).
  * Quick Action Buttons: “Buy Tokens”, “Start Assignment”.
* Assignment Page:

  * Shows token cost before starting (e.g., “This assignment requires 12 tokens”).
  * Option to proceed if balance sufficient or redirect to payment.
* Payment Page:

  * RazorPay checkout modal (INR or USD auto-set).
  * Token packs for convenience.
  * After success, updated balance displayed instantly.

**Teacher Flow**

* Assignment creation tool.
* Assignment list with question count and required tokens preview.
* Analytics on student participation (optional future feature).

**Account Section (UI elements)**

* Profile Card: Name, email, country, currency type.
* Wallet Widget: Token balance, “Buy Tokens” button.
* Transaction History Table:

  * Columns: Date, Type (Purchase/Deduction), Tokens, Amount, Balance.
* Payment History Table:

  * Columns: Date, Amount, Currency, RazorPay Order ID, Status.
* Assignment Log:

  * Columns: Date, Assignment Name, Questions, Tokens Spent.

---

## 9. Security & Reliability

* Store minimal payment details (no card info, just RazorPay IDs).
* All sensitive data encrypted (passwords hashed).
* Token transactions atomic (deduct + log in a single DB transaction).
* Handle race conditions if multiple assignments start at once.

---
